import java.util.Arrays;

/**
 * 376. 摆动序列
 * 如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。
 *
 * 例如， [1, 7, 4, 9, 2, 5] 是一个 摆动序列 ，因为差值 (6, -3, 5, -7, 3) 是正负交替出现的。
 *
 * 相反，[1, 4, 7, 2, 5] 和 [1, 7, 4, 5, 5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。
 * 子序列 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。
 *
 * 给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度 。
 *
 *
 *
 *
 *
 * 子序列 和 子串的区别。
 *
 * 这里如果是求子串，动归，O(n).  求子序列，动归，o(n^2).
 *
 *
 *
 *
 *
 * 思路： 同T300。 也是动归。 O(n^2).
 *
 * dp[i] 表示 以i为结尾的，最长子序列的长度。
 * 因为设计到三个数的关系，只用一个状态表示是不够的，因此每个位置要有两个状态。 dp[i][0] ,i为结尾时，与前一个数差为正, dp[i][1]为负时，最长长度。
 * 那么dp[i][0] dp[i][1] 就只和前一个数相关联了。
 * 和T300区别就在有两个状态。T300直接使用dp[i]来处理就好。
 *
 * O(n^2)
 *
 *
 * 如果是求最长字串，那么直接dp[i]状态就好，而且是o(n).
 *
 *
 *
 * 撒花！！这题能独立分析出来。
 *
 *
 * @author rzet
 * @date 2021/12/4 14:50
 */
public class T376 {

    public int wiggleMaxLength(int[] nums) {
        if(nums.length == 1)
            return 1;

        if (nums.length == 2)
            return nums[0] != nums[1]? 2: 1; //本身算一个。
        

        int dp[][] = new int[nums.length][2];//dp[i][0] ,i为结尾时，与前一个数差为正, dp[i][1]为负时，最长长度。
        dp[0][0] = 1; //自身。
        dp[0][1] = 1;


        int max = 0;
        for (int i = 1; i < nums.length; i++){
            Arrays.fill(dp[i],1);//自身。
            for (int j = 0; j < i; j++){
                if (nums[i] > nums[j])
                    dp[i][0] = Math.max(dp[i][0] ,dp[j][1] + 1);
                else if (nums[i] < nums[j])
                    dp[i][1] = Math.max(dp[i][1] ,dp[j][0] + 1);
            }
            if (max < dp[i][0])
                max = dp[i][0];

            if (max < dp[i][1])
                max =dp[i][1];

        }

        return max;

    }
}
